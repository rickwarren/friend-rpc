// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: src/protos/user-charity.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";

//========================================//
//                 Types                  //
//========================================//

export interface UserID {
  id: string;
}

export interface UserCharityId {
  id: string;
}

export interface GetUserCharitiesResponseDto {
  userCharities: UserCharityDto[];
}

export interface DeleteUserCharityResponseDto {
  success: boolean;
}

export interface CreateUserCharityDto {
  userId: string;
  charityId: string;
}

export interface UserCharityDto {
  id: string;
  userId: string;
  charityId: string;
  createdAt: string;
  updatedAt: string;
}

//========================================//
//    UserCharityProto Protobuf Client    //
//========================================//

export async function getUserCharities(
  userID: UserID,
  config?: ClientConfiguration,
): Promise<GetUserCharitiesResponseDto> {
  const response = await PBrequest(
    "/UserCharityProto/getUserCharities",
    UserID.encode(userID),
    config,
  );
  return GetUserCharitiesResponseDto.decode(response);
}

export async function createUserCharity(
  createUserCharityDto: CreateUserCharityDto,
  config?: ClientConfiguration,
): Promise<UserCharityDto> {
  const response = await PBrequest(
    "/UserCharityProto/createUserCharity",
    CreateUserCharityDto.encode(createUserCharityDto),
    config,
  );
  return UserCharityDto.decode(response);
}

export async function deleteUserCharity(
  userCharityId: UserCharityId,
  config?: ClientConfiguration,
): Promise<DeleteUserCharityResponseDto> {
  const response = await PBrequest(
    "/UserCharityProto/deleteUserCharity",
    UserCharityId.encode(userCharityId),
    config,
  );
  return DeleteUserCharityResponseDto.decode(response);
}

//========================================//
//      UserCharityProto JSON Client      //
//========================================//

export async function getUserCharitiesJSON(
  userID: UserID,
  config?: ClientConfiguration,
): Promise<GetUserCharitiesResponseDto> {
  const response = await JSONrequest(
    "/UserCharityProto/getUserCharities",
    UserIDJSON.encode(userID),
    config,
  );
  return GetUserCharitiesResponseDtoJSON.decode(response);
}

export async function createUserCharityJSON(
  createUserCharityDto: CreateUserCharityDto,
  config?: ClientConfiguration,
): Promise<UserCharityDto> {
  const response = await JSONrequest(
    "/UserCharityProto/createUserCharity",
    CreateUserCharityDtoJSON.encode(createUserCharityDto),
    config,
  );
  return UserCharityDtoJSON.decode(response);
}

export async function deleteUserCharityJSON(
  userCharityId: UserCharityId,
  config?: ClientConfiguration,
): Promise<DeleteUserCharityResponseDto> {
  const response = await JSONrequest(
    "/UserCharityProto/deleteUserCharity",
    UserCharityIdJSON.encode(userCharityId),
    config,
  );
  return DeleteUserCharityResponseDtoJSON.decode(response);
}

//========================================//
//            UserCharityProto            //
//========================================//

export interface UserCharityProto<Context = unknown> {
  getUserCharities: (
    userID: UserID,
    context: Context,
  ) => Promise<GetUserCharitiesResponseDto> | GetUserCharitiesResponseDto;
  createUserCharity: (
    createUserCharityDto: CreateUserCharityDto,
    context: Context,
  ) => Promise<UserCharityDto> | UserCharityDto;
  deleteUserCharity: (
    userCharityId: UserCharityId,
    context: Context,
  ) => Promise<DeleteUserCharityResponseDto> | DeleteUserCharityResponseDto;
}

export function createUserCharityProto<Context>(
  service: UserCharityProto<Context>,
) {
  return {
    name: "UserCharityProto",
    methods: {
      getUserCharities: {
        name: "getUserCharities",
        handler: service.getUserCharities,
        input: { protobuf: UserID, json: UserIDJSON },
        output: {
          protobuf: GetUserCharitiesResponseDto,
          json: GetUserCharitiesResponseDtoJSON,
        },
      },
      createUserCharity: {
        name: "createUserCharity",
        handler: service.createUserCharity,
        input: {
          protobuf: CreateUserCharityDto,
          json: CreateUserCharityDtoJSON,
        },
        output: { protobuf: UserCharityDto, json: UserCharityDtoJSON },
      },
      deleteUserCharity: {
        name: "deleteUserCharity",
        handler: service.deleteUserCharity,
        input: { protobuf: UserCharityId, json: UserCharityIdJSON },
        output: {
          protobuf: DeleteUserCharityResponseDto,
          json: DeleteUserCharityResponseDtoJSON,
        },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const UserID = {
  /**
   * Serializes UserID to protobuf.
   */
  encode: function (msg: PartialDeep<UserID>): Uint8Array {
    return UserID._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes UserID from protobuf.
   */
  decode: function (bytes: ByteSource): UserID {
    return UserID._readMessage(
      UserID.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes UserID with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UserID>): UserID {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UserID>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UserID,
    reader: protoscript.BinaryReader,
  ): UserID {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UserCharityId = {
  /**
   * Serializes UserCharityId to protobuf.
   */
  encode: function (msg: PartialDeep<UserCharityId>): Uint8Array {
    return UserCharityId._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes UserCharityId from protobuf.
   */
  decode: function (bytes: ByteSource): UserCharityId {
    return UserCharityId._readMessage(
      UserCharityId.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes UserCharityId with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UserCharityId>): UserCharityId {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UserCharityId>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UserCharityId,
    reader: protoscript.BinaryReader,
  ): UserCharityId {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetUserCharitiesResponseDto = {
  /**
   * Serializes GetUserCharitiesResponseDto to protobuf.
   */
  encode: function (msg: PartialDeep<GetUserCharitiesResponseDto>): Uint8Array {
    return GetUserCharitiesResponseDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetUserCharitiesResponseDto from protobuf.
   */
  decode: function (bytes: ByteSource): GetUserCharitiesResponseDto {
    return GetUserCharitiesResponseDto._readMessage(
      GetUserCharitiesResponseDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetUserCharitiesResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetUserCharitiesResponseDto>,
  ): GetUserCharitiesResponseDto {
    return {
      userCharities: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetUserCharitiesResponseDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.userCharities?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.userCharities as any,
        UserCharityDto._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetUserCharitiesResponseDto,
    reader: protoscript.BinaryReader,
  ): GetUserCharitiesResponseDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = UserCharityDto.initialize();
          reader.readMessage(m, UserCharityDto._readMessage);
          msg.userCharities.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const DeleteUserCharityResponseDto = {
  /**
   * Serializes DeleteUserCharityResponseDto to protobuf.
   */
  encode: function (
    msg: PartialDeep<DeleteUserCharityResponseDto>,
  ): Uint8Array {
    return DeleteUserCharityResponseDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes DeleteUserCharityResponseDto from protobuf.
   */
  decode: function (bytes: ByteSource): DeleteUserCharityResponseDto {
    return DeleteUserCharityResponseDto._readMessage(
      DeleteUserCharityResponseDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes DeleteUserCharityResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteUserCharityResponseDto>,
  ): DeleteUserCharityResponseDto {
    return {
      success: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteUserCharityResponseDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.success) {
      writer.writeBool(1, msg.success);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteUserCharityResponseDto,
    reader: protoscript.BinaryReader,
  ): DeleteUserCharityResponseDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.success = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateUserCharityDto = {
  /**
   * Serializes CreateUserCharityDto to protobuf.
   */
  encode: function (msg: PartialDeep<CreateUserCharityDto>): Uint8Array {
    return CreateUserCharityDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateUserCharityDto from protobuf.
   */
  decode: function (bytes: ByteSource): CreateUserCharityDto {
    return CreateUserCharityDto._readMessage(
      CreateUserCharityDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CreateUserCharityDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateUserCharityDto>,
  ): CreateUserCharityDto {
    return {
      userId: "",
      charityId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateUserCharityDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.userId) {
      writer.writeString(1, msg.userId);
    }
    if (msg.charityId) {
      writer.writeString(2, msg.charityId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateUserCharityDto,
    reader: protoscript.BinaryReader,
  ): CreateUserCharityDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.userId = reader.readString();
          break;
        }
        case 2: {
          msg.charityId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UserCharityDto = {
  /**
   * Serializes UserCharityDto to protobuf.
   */
  encode: function (msg: PartialDeep<UserCharityDto>): Uint8Array {
    return UserCharityDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes UserCharityDto from protobuf.
   */
  decode: function (bytes: ByteSource): UserCharityDto {
    return UserCharityDto._readMessage(
      UserCharityDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes UserCharityDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UserCharityDto>): UserCharityDto {
    return {
      id: "",
      userId: "",
      charityId: "",
      createdAt: "",
      updatedAt: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UserCharityDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.userId) {
      writer.writeString(2, msg.userId);
    }
    if (msg.charityId) {
      writer.writeString(3, msg.charityId);
    }
    if (msg.createdAt) {
      writer.writeString(4, msg.createdAt);
    }
    if (msg.updatedAt) {
      writer.writeString(5, msg.updatedAt);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UserCharityDto,
    reader: protoscript.BinaryReader,
  ): UserCharityDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          msg.userId = reader.readString();
          break;
        }
        case 3: {
          msg.charityId = reader.readString();
          break;
        }
        case 4: {
          msg.createdAt = reader.readString();
          break;
        }
        case 5: {
          msg.updatedAt = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const UserIDJSON = {
  /**
   * Serializes UserID to JSON.
   */
  encode: function (msg: PartialDeep<UserID>): string {
    return JSON.stringify(UserIDJSON._writeMessage(msg));
  },

  /**
   * Deserializes UserID from JSON.
   */
  decode: function (json: string): UserID {
    return UserIDJSON._readMessage(UserIDJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes UserID with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UserID>): UserID {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<UserID>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: UserID, json: any): UserID {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    return msg;
  },
};

export const UserCharityIdJSON = {
  /**
   * Serializes UserCharityId to JSON.
   */
  encode: function (msg: PartialDeep<UserCharityId>): string {
    return JSON.stringify(UserCharityIdJSON._writeMessage(msg));
  },

  /**
   * Deserializes UserCharityId from JSON.
   */
  decode: function (json: string): UserCharityId {
    return UserCharityIdJSON._readMessage(
      UserCharityIdJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes UserCharityId with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UserCharityId>): UserCharityId {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UserCharityId>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: UserCharityId, json: any): UserCharityId {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    return msg;
  },
};

export const GetUserCharitiesResponseDtoJSON = {
  /**
   * Serializes GetUserCharitiesResponseDto to JSON.
   */
  encode: function (msg: PartialDeep<GetUserCharitiesResponseDto>): string {
    return JSON.stringify(GetUserCharitiesResponseDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetUserCharitiesResponseDto from JSON.
   */
  decode: function (json: string): GetUserCharitiesResponseDto {
    return GetUserCharitiesResponseDtoJSON._readMessage(
      GetUserCharitiesResponseDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetUserCharitiesResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetUserCharitiesResponseDto>,
  ): GetUserCharitiesResponseDto {
    return {
      userCharities: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetUserCharitiesResponseDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.userCharities?.length) {
      json["userCharities"] = msg.userCharities.map(
        UserCharityDtoJSON._writeMessage,
      );
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetUserCharitiesResponseDto,
    json: any,
  ): GetUserCharitiesResponseDto {
    const _userCharities_ = json["userCharities"];
    if (_userCharities_) {
      for (const item of _userCharities_) {
        const m = UserCharityDtoJSON.initialize();
        UserCharityDtoJSON._readMessage(m, item);
        msg.userCharities.push(m);
      }
    }
    return msg;
  },
};

export const DeleteUserCharityResponseDtoJSON = {
  /**
   * Serializes DeleteUserCharityResponseDto to JSON.
   */
  encode: function (msg: PartialDeep<DeleteUserCharityResponseDto>): string {
    return JSON.stringify(DeleteUserCharityResponseDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes DeleteUserCharityResponseDto from JSON.
   */
  decode: function (json: string): DeleteUserCharityResponseDto {
    return DeleteUserCharityResponseDtoJSON._readMessage(
      DeleteUserCharityResponseDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes DeleteUserCharityResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteUserCharityResponseDto>,
  ): DeleteUserCharityResponseDto {
    return {
      success: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteUserCharityResponseDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.success) {
      json["success"] = msg.success;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteUserCharityResponseDto,
    json: any,
  ): DeleteUserCharityResponseDto {
    const _success_ = json["success"];
    if (_success_) {
      msg.success = _success_;
    }
    return msg;
  },
};

export const CreateUserCharityDtoJSON = {
  /**
   * Serializes CreateUserCharityDto to JSON.
   */
  encode: function (msg: PartialDeep<CreateUserCharityDto>): string {
    return JSON.stringify(CreateUserCharityDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateUserCharityDto from JSON.
   */
  decode: function (json: string): CreateUserCharityDto {
    return CreateUserCharityDtoJSON._readMessage(
      CreateUserCharityDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CreateUserCharityDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateUserCharityDto>,
  ): CreateUserCharityDto {
    return {
      userId: "",
      charityId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateUserCharityDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.userId) {
      json["userId"] = msg.userId;
    }
    if (msg.charityId) {
      json["charityId"] = msg.charityId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateUserCharityDto,
    json: any,
  ): CreateUserCharityDto {
    const _userId_ = json["userId"];
    if (_userId_) {
      msg.userId = _userId_;
    }
    const _charityId_ = json["charityId"];
    if (_charityId_) {
      msg.charityId = _charityId_;
    }
    return msg;
  },
};

export const UserCharityDtoJSON = {
  /**
   * Serializes UserCharityDto to JSON.
   */
  encode: function (msg: PartialDeep<UserCharityDto>): string {
    return JSON.stringify(UserCharityDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes UserCharityDto from JSON.
   */
  decode: function (json: string): UserCharityDto {
    return UserCharityDtoJSON._readMessage(
      UserCharityDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes UserCharityDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UserCharityDto>): UserCharityDto {
    return {
      id: "",
      userId: "",
      charityId: "",
      createdAt: "",
      updatedAt: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UserCharityDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.userId) {
      json["userId"] = msg.userId;
    }
    if (msg.charityId) {
      json["charityId"] = msg.charityId;
    }
    if (msg.createdAt) {
      json["createdAt"] = msg.createdAt;
    }
    if (msg.updatedAt) {
      json["updatedAt"] = msg.updatedAt;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: UserCharityDto, json: any): UserCharityDto {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _userId_ = json["userId"];
    if (_userId_) {
      msg.userId = _userId_;
    }
    const _charityId_ = json["charityId"];
    if (_charityId_) {
      msg.charityId = _charityId_;
    }
    const _createdAt_ = json["createdAt"];
    if (_createdAt_) {
      msg.createdAt = _createdAt_;
    }
    const _updatedAt_ = json["updatedAt"];
    if (_updatedAt_) {
      msg.updatedAt = _updatedAt_;
    }
    return msg;
  },
};
