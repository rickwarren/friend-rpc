// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: src/protos/friend-list.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";

//========================================//
//                 Types                  //
//========================================//

export interface UserId {
  id: number;
}

export interface AreUsersFriendsRequestDto {
  id: number;
  userId: number;
}

export interface AreUsersFriendsResponseDto {
  success: boolean;
}

export interface GetFriendListsResponseDto {
  friends: FriendList[];
}

export interface DeleteFriendListResponseDto {
  success: boolean;
}

export interface FriendListId {
  id: number;
}

export interface CreateFriendListDto {
  requesterId: number;
  addresseId: number;
  friendType: string;
}

export interface FriendList {
  id: number;
  requesterId: number;
  addresseId: number;
  friendType: string;
  createdAt: protoscript.Timestamp;
  updatedAt: protoscript.Timestamp;
}

//========================================//
//    FriendListProto Protobuf Client     //
//========================================//

export async function getFriendsByUserId(
  userId: UserId,
  config?: ClientConfiguration,
): Promise<GetFriendListsResponseDto> {
  const response = await PBrequest(
    "/FriendListProto/getFriendsByUserId",
    UserId.encode(userId),
    config,
  );
  return GetFriendListsResponseDto.decode(response);
}

export async function areUsersFriends(
  areUsersFriendsRequestDto: AreUsersFriendsRequestDto,
  config?: ClientConfiguration,
): Promise<AreUsersFriendsResponseDto> {
  const response = await PBrequest(
    "/FriendListProto/areUsersFriends",
    AreUsersFriendsRequestDto.encode(areUsersFriendsRequestDto),
    config,
  );
  return AreUsersFriendsResponseDto.decode(response);
}

export async function addFriend(
  createFriendListDto: CreateFriendListDto,
  config?: ClientConfiguration,
): Promise<FriendList> {
  const response = await PBrequest(
    "/FriendListProto/addFriend",
    CreateFriendListDto.encode(createFriendListDto),
    config,
  );
  return FriendList.decode(response);
}

export async function removeFriend(
  friendListId: FriendListId,
  config?: ClientConfiguration,
): Promise<DeleteFriendListResponseDto> {
  const response = await PBrequest(
    "/FriendListProto/removeFriend",
    FriendListId.encode(friendListId),
    config,
  );
  return DeleteFriendListResponseDto.decode(response);
}

//========================================//
//      FriendListProto JSON Client       //
//========================================//

export async function getFriendsByUserIdJSON(
  userId: UserId,
  config?: ClientConfiguration,
): Promise<GetFriendListsResponseDto> {
  const response = await JSONrequest(
    "/FriendListProto/getFriendsByUserId",
    UserIdJSON.encode(userId),
    config,
  );
  return GetFriendListsResponseDtoJSON.decode(response);
}

export async function areUsersFriendsJSON(
  areUsersFriendsRequestDto: AreUsersFriendsRequestDto,
  config?: ClientConfiguration,
): Promise<AreUsersFriendsResponseDto> {
  const response = await JSONrequest(
    "/FriendListProto/areUsersFriends",
    AreUsersFriendsRequestDtoJSON.encode(areUsersFriendsRequestDto),
    config,
  );
  return AreUsersFriendsResponseDtoJSON.decode(response);
}

export async function addFriendJSON(
  createFriendListDto: CreateFriendListDto,
  config?: ClientConfiguration,
): Promise<FriendList> {
  const response = await JSONrequest(
    "/FriendListProto/addFriend",
    CreateFriendListDtoJSON.encode(createFriendListDto),
    config,
  );
  return FriendListJSON.decode(response);
}

export async function removeFriendJSON(
  friendListId: FriendListId,
  config?: ClientConfiguration,
): Promise<DeleteFriendListResponseDto> {
  const response = await JSONrequest(
    "/FriendListProto/removeFriend",
    FriendListIdJSON.encode(friendListId),
    config,
  );
  return DeleteFriendListResponseDtoJSON.decode(response);
}

//========================================//
//            FriendListProto             //
//========================================//

export interface FriendListProto<Context = unknown> {
  getFriendsByUserId: (
    userId: UserId,
    context: Context,
  ) => Promise<GetFriendListsResponseDto> | GetFriendListsResponseDto;
  areUsersFriends: (
    areUsersFriendsRequestDto: AreUsersFriendsRequestDto,
    context: Context,
  ) => Promise<AreUsersFriendsResponseDto> | AreUsersFriendsResponseDto;
  addFriend: (
    createFriendListDto: CreateFriendListDto,
    context: Context,
  ) => Promise<FriendList> | FriendList;
  removeFriend: (
    friendListId: FriendListId,
    context: Context,
  ) => Promise<DeleteFriendListResponseDto> | DeleteFriendListResponseDto;
}

export function createFriendListProto<Context>(
  service: FriendListProto<Context>,
) {
  return {
    name: "FriendListProto",
    methods: {
      getFriendsByUserId: {
        name: "getFriendsByUserId",
        handler: service.getFriendsByUserId,
        input: { protobuf: UserId, json: UserIdJSON },
        output: {
          protobuf: GetFriendListsResponseDto,
          json: GetFriendListsResponseDtoJSON,
        },
      },
      areUsersFriends: {
        name: "areUsersFriends",
        handler: service.areUsersFriends,
        input: {
          protobuf: AreUsersFriendsRequestDto,
          json: AreUsersFriendsRequestDtoJSON,
        },
        output: {
          protobuf: AreUsersFriendsResponseDto,
          json: AreUsersFriendsResponseDtoJSON,
        },
      },
      addFriend: {
        name: "addFriend",
        handler: service.addFriend,
        input: { protobuf: CreateFriendListDto, json: CreateFriendListDtoJSON },
        output: { protobuf: FriendList, json: FriendListJSON },
      },
      removeFriend: {
        name: "removeFriend",
        handler: service.removeFriend,
        input: { protobuf: FriendListId, json: FriendListIdJSON },
        output: {
          protobuf: DeleteFriendListResponseDto,
          json: DeleteFriendListResponseDtoJSON,
        },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const UserId = {
  /**
   * Serializes UserId to protobuf.
   */
  encode: function (msg: PartialDeep<UserId>): Uint8Array {
    return UserId._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes UserId from protobuf.
   */
  decode: function (bytes: ByteSource): UserId {
    return UserId._readMessage(
      UserId.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes UserId with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UserId>): UserId {
    return {
      id: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UserId>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeInt32(1, msg.id);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UserId,
    reader: protoscript.BinaryReader,
  ): UserId {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AreUsersFriendsRequestDto = {
  /**
   * Serializes AreUsersFriendsRequestDto to protobuf.
   */
  encode: function (msg: PartialDeep<AreUsersFriendsRequestDto>): Uint8Array {
    return AreUsersFriendsRequestDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AreUsersFriendsRequestDto from protobuf.
   */
  decode: function (bytes: ByteSource): AreUsersFriendsRequestDto {
    return AreUsersFriendsRequestDto._readMessage(
      AreUsersFriendsRequestDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes AreUsersFriendsRequestDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<AreUsersFriendsRequestDto>,
  ): AreUsersFriendsRequestDto {
    return {
      id: 0,
      userId: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AreUsersFriendsRequestDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeInt32(1, msg.id);
    }
    if (msg.userId) {
      writer.writeInt32(2, msg.userId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AreUsersFriendsRequestDto,
    reader: protoscript.BinaryReader,
  ): AreUsersFriendsRequestDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readInt32();
          break;
        }
        case 2: {
          msg.userId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AreUsersFriendsResponseDto = {
  /**
   * Serializes AreUsersFriendsResponseDto to protobuf.
   */
  encode: function (msg: PartialDeep<AreUsersFriendsResponseDto>): Uint8Array {
    return AreUsersFriendsResponseDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AreUsersFriendsResponseDto from protobuf.
   */
  decode: function (bytes: ByteSource): AreUsersFriendsResponseDto {
    return AreUsersFriendsResponseDto._readMessage(
      AreUsersFriendsResponseDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes AreUsersFriendsResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<AreUsersFriendsResponseDto>,
  ): AreUsersFriendsResponseDto {
    return {
      success: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AreUsersFriendsResponseDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.success) {
      writer.writeBool(1, msg.success);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AreUsersFriendsResponseDto,
    reader: protoscript.BinaryReader,
  ): AreUsersFriendsResponseDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.success = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetFriendListsResponseDto = {
  /**
   * Serializes GetFriendListsResponseDto to protobuf.
   */
  encode: function (msg: PartialDeep<GetFriendListsResponseDto>): Uint8Array {
    return GetFriendListsResponseDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetFriendListsResponseDto from protobuf.
   */
  decode: function (bytes: ByteSource): GetFriendListsResponseDto {
    return GetFriendListsResponseDto._readMessage(
      GetFriendListsResponseDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetFriendListsResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetFriendListsResponseDto>,
  ): GetFriendListsResponseDto {
    return {
      friends: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetFriendListsResponseDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.friends?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.friends as any,
        FriendList._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetFriendListsResponseDto,
    reader: protoscript.BinaryReader,
  ): GetFriendListsResponseDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = FriendList.initialize();
          reader.readMessage(m, FriendList._readMessage);
          msg.friends.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const DeleteFriendListResponseDto = {
  /**
   * Serializes DeleteFriendListResponseDto to protobuf.
   */
  encode: function (msg: PartialDeep<DeleteFriendListResponseDto>): Uint8Array {
    return DeleteFriendListResponseDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes DeleteFriendListResponseDto from protobuf.
   */
  decode: function (bytes: ByteSource): DeleteFriendListResponseDto {
    return DeleteFriendListResponseDto._readMessage(
      DeleteFriendListResponseDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes DeleteFriendListResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteFriendListResponseDto>,
  ): DeleteFriendListResponseDto {
    return {
      success: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteFriendListResponseDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.success) {
      writer.writeBool(1, msg.success);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteFriendListResponseDto,
    reader: protoscript.BinaryReader,
  ): DeleteFriendListResponseDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.success = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const FriendListId = {
  /**
   * Serializes FriendListId to protobuf.
   */
  encode: function (msg: PartialDeep<FriendListId>): Uint8Array {
    return FriendListId._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes FriendListId from protobuf.
   */
  decode: function (bytes: ByteSource): FriendListId {
    return FriendListId._readMessage(
      FriendListId.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes FriendListId with all fields set to their default value.
   */
  initialize: function (msg?: Partial<FriendListId>): FriendListId {
    return {
      id: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<FriendListId>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeInt32(1, msg.id);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FriendListId,
    reader: protoscript.BinaryReader,
  ): FriendListId {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateFriendListDto = {
  /**
   * Serializes CreateFriendListDto to protobuf.
   */
  encode: function (msg: PartialDeep<CreateFriendListDto>): Uint8Array {
    return CreateFriendListDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateFriendListDto from protobuf.
   */
  decode: function (bytes: ByteSource): CreateFriendListDto {
    return CreateFriendListDto._readMessage(
      CreateFriendListDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CreateFriendListDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateFriendListDto>,
  ): CreateFriendListDto {
    return {
      requesterId: 0,
      addresseId: 0,
      friendType: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateFriendListDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.requesterId) {
      writer.writeInt32(1, msg.requesterId);
    }
    if (msg.addresseId) {
      writer.writeInt32(2, msg.addresseId);
    }
    if (msg.friendType) {
      writer.writeString(3, msg.friendType);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateFriendListDto,
    reader: protoscript.BinaryReader,
  ): CreateFriendListDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.requesterId = reader.readInt32();
          break;
        }
        case 2: {
          msg.addresseId = reader.readInt32();
          break;
        }
        case 3: {
          msg.friendType = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const FriendList = {
  /**
   * Serializes FriendList to protobuf.
   */
  encode: function (msg: PartialDeep<FriendList>): Uint8Array {
    return FriendList._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes FriendList from protobuf.
   */
  decode: function (bytes: ByteSource): FriendList {
    return FriendList._readMessage(
      FriendList.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes FriendList with all fields set to their default value.
   */
  initialize: function (msg?: Partial<FriendList>): FriendList {
    return {
      id: 0,
      requesterId: 0,
      addresseId: 0,
      friendType: "",
      createdAt: protoscript.Timestamp.initialize(),
      updatedAt: protoscript.Timestamp.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<FriendList>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeInt32(1, msg.id);
    }
    if (msg.requesterId) {
      writer.writeInt32(2, msg.requesterId);
    }
    if (msg.addresseId) {
      writer.writeInt32(3, msg.addresseId);
    }
    if (msg.friendType) {
      writer.writeString(4, msg.friendType);
    }
    if (msg.createdAt) {
      writer.writeMessage(
        5,
        msg.createdAt,
        protoscript.Timestamp._writeMessage,
      );
    }
    if (msg.updatedAt) {
      writer.writeMessage(
        6,
        msg.updatedAt,
        protoscript.Timestamp._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FriendList,
    reader: protoscript.BinaryReader,
  ): FriendList {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readInt32();
          break;
        }
        case 2: {
          msg.requesterId = reader.readInt32();
          break;
        }
        case 3: {
          msg.addresseId = reader.readInt32();
          break;
        }
        case 4: {
          msg.friendType = reader.readString();
          break;
        }
        case 5: {
          reader.readMessage(msg.createdAt, protoscript.Timestamp._readMessage);
          break;
        }
        case 6: {
          reader.readMessage(msg.updatedAt, protoscript.Timestamp._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const UserIdJSON = {
  /**
   * Serializes UserId to JSON.
   */
  encode: function (msg: PartialDeep<UserId>): string {
    return JSON.stringify(UserIdJSON._writeMessage(msg));
  },

  /**
   * Deserializes UserId from JSON.
   */
  decode: function (json: string): UserId {
    return UserIdJSON._readMessage(UserIdJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes UserId with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UserId>): UserId {
    return {
      id: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<UserId>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: UserId, json: any): UserId {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = protoscript.parseNumber(_id_);
    }
    return msg;
  },
};

export const AreUsersFriendsRequestDtoJSON = {
  /**
   * Serializes AreUsersFriendsRequestDto to JSON.
   */
  encode: function (msg: PartialDeep<AreUsersFriendsRequestDto>): string {
    return JSON.stringify(AreUsersFriendsRequestDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes AreUsersFriendsRequestDto from JSON.
   */
  decode: function (json: string): AreUsersFriendsRequestDto {
    return AreUsersFriendsRequestDtoJSON._readMessage(
      AreUsersFriendsRequestDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AreUsersFriendsRequestDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<AreUsersFriendsRequestDto>,
  ): AreUsersFriendsRequestDto {
    return {
      id: 0,
      userId: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AreUsersFriendsRequestDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.userId) {
      json["userId"] = msg.userId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AreUsersFriendsRequestDto,
    json: any,
  ): AreUsersFriendsRequestDto {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = protoscript.parseNumber(_id_);
    }
    const _userId_ = json["userId"];
    if (_userId_) {
      msg.userId = protoscript.parseNumber(_userId_);
    }
    return msg;
  },
};

export const AreUsersFriendsResponseDtoJSON = {
  /**
   * Serializes AreUsersFriendsResponseDto to JSON.
   */
  encode: function (msg: PartialDeep<AreUsersFriendsResponseDto>): string {
    return JSON.stringify(AreUsersFriendsResponseDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes AreUsersFriendsResponseDto from JSON.
   */
  decode: function (json: string): AreUsersFriendsResponseDto {
    return AreUsersFriendsResponseDtoJSON._readMessage(
      AreUsersFriendsResponseDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AreUsersFriendsResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<AreUsersFriendsResponseDto>,
  ): AreUsersFriendsResponseDto {
    return {
      success: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AreUsersFriendsResponseDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.success) {
      json["success"] = msg.success;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AreUsersFriendsResponseDto,
    json: any,
  ): AreUsersFriendsResponseDto {
    const _success_ = json["success"];
    if (_success_) {
      msg.success = _success_;
    }
    return msg;
  },
};

export const GetFriendListsResponseDtoJSON = {
  /**
   * Serializes GetFriendListsResponseDto to JSON.
   */
  encode: function (msg: PartialDeep<GetFriendListsResponseDto>): string {
    return JSON.stringify(GetFriendListsResponseDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetFriendListsResponseDto from JSON.
   */
  decode: function (json: string): GetFriendListsResponseDto {
    return GetFriendListsResponseDtoJSON._readMessage(
      GetFriendListsResponseDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetFriendListsResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetFriendListsResponseDto>,
  ): GetFriendListsResponseDto {
    return {
      friends: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetFriendListsResponseDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.friends?.length) {
      json["friends"] = msg.friends.map(FriendListJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetFriendListsResponseDto,
    json: any,
  ): GetFriendListsResponseDto {
    const _friends_ = json["friends"];
    if (_friends_) {
      for (const item of _friends_) {
        const m = FriendListJSON.initialize();
        FriendListJSON._readMessage(m, item);
        msg.friends.push(m);
      }
    }
    return msg;
  },
};

export const DeleteFriendListResponseDtoJSON = {
  /**
   * Serializes DeleteFriendListResponseDto to JSON.
   */
  encode: function (msg: PartialDeep<DeleteFriendListResponseDto>): string {
    return JSON.stringify(DeleteFriendListResponseDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes DeleteFriendListResponseDto from JSON.
   */
  decode: function (json: string): DeleteFriendListResponseDto {
    return DeleteFriendListResponseDtoJSON._readMessage(
      DeleteFriendListResponseDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes DeleteFriendListResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteFriendListResponseDto>,
  ): DeleteFriendListResponseDto {
    return {
      success: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteFriendListResponseDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.success) {
      json["success"] = msg.success;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteFriendListResponseDto,
    json: any,
  ): DeleteFriendListResponseDto {
    const _success_ = json["success"];
    if (_success_) {
      msg.success = _success_;
    }
    return msg;
  },
};

export const FriendListIdJSON = {
  /**
   * Serializes FriendListId to JSON.
   */
  encode: function (msg: PartialDeep<FriendListId>): string {
    return JSON.stringify(FriendListIdJSON._writeMessage(msg));
  },

  /**
   * Deserializes FriendListId from JSON.
   */
  decode: function (json: string): FriendListId {
    return FriendListIdJSON._readMessage(
      FriendListIdJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes FriendListId with all fields set to their default value.
   */
  initialize: function (msg?: Partial<FriendListId>): FriendListId {
    return {
      id: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<FriendListId>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: FriendListId, json: any): FriendListId {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = protoscript.parseNumber(_id_);
    }
    return msg;
  },
};

export const CreateFriendListDtoJSON = {
  /**
   * Serializes CreateFriendListDto to JSON.
   */
  encode: function (msg: PartialDeep<CreateFriendListDto>): string {
    return JSON.stringify(CreateFriendListDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateFriendListDto from JSON.
   */
  decode: function (json: string): CreateFriendListDto {
    return CreateFriendListDtoJSON._readMessage(
      CreateFriendListDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CreateFriendListDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateFriendListDto>,
  ): CreateFriendListDto {
    return {
      requesterId: 0,
      addresseId: 0,
      friendType: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateFriendListDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.requesterId) {
      json["requesterId"] = msg.requesterId;
    }
    if (msg.addresseId) {
      json["addresseId"] = msg.addresseId;
    }
    if (msg.friendType) {
      json["friendType"] = msg.friendType;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateFriendListDto,
    json: any,
  ): CreateFriendListDto {
    const _requesterId_ = json["requesterId"];
    if (_requesterId_) {
      msg.requesterId = protoscript.parseNumber(_requesterId_);
    }
    const _addresseId_ = json["addresseId"];
    if (_addresseId_) {
      msg.addresseId = protoscript.parseNumber(_addresseId_);
    }
    const _friendType_ = json["friendType"];
    if (_friendType_) {
      msg.friendType = _friendType_;
    }
    return msg;
  },
};

export const FriendListJSON = {
  /**
   * Serializes FriendList to JSON.
   */
  encode: function (msg: PartialDeep<FriendList>): string {
    return JSON.stringify(FriendListJSON._writeMessage(msg));
  },

  /**
   * Deserializes FriendList from JSON.
   */
  decode: function (json: string): FriendList {
    return FriendListJSON._readMessage(
      FriendListJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes FriendList with all fields set to their default value.
   */
  initialize: function (msg?: Partial<FriendList>): FriendList {
    return {
      id: 0,
      requesterId: 0,
      addresseId: 0,
      friendType: "",
      createdAt: protoscript.TimestampJSON.initialize(),
      updatedAt: protoscript.TimestampJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<FriendList>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.requesterId) {
      json["requesterId"] = msg.requesterId;
    }
    if (msg.addresseId) {
      json["addresseId"] = msg.addresseId;
    }
    if (msg.friendType) {
      json["friendType"] = msg.friendType;
    }
    if (msg.createdAt && msg.createdAt.seconds && msg.createdAt.nanos) {
      json["createdAt"] = protoscript.serializeTimestamp(msg.createdAt);
    }
    if (msg.updatedAt && msg.updatedAt.seconds && msg.updatedAt.nanos) {
      json["updatedAt"] = protoscript.serializeTimestamp(msg.updatedAt);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: FriendList, json: any): FriendList {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = protoscript.parseNumber(_id_);
    }
    const _requesterId_ = json["requesterId"];
    if (_requesterId_) {
      msg.requesterId = protoscript.parseNumber(_requesterId_);
    }
    const _addresseId_ = json["addresseId"];
    if (_addresseId_) {
      msg.addresseId = protoscript.parseNumber(_addresseId_);
    }
    const _friendType_ = json["friendType"];
    if (_friendType_) {
      msg.friendType = _friendType_;
    }
    const _createdAt_ = json["createdAt"];
    if (_createdAt_) {
      msg.createdAt = protoscript.parseTimestamp(_createdAt_);
    }
    const _updatedAt_ = json["updatedAt"];
    if (_updatedAt_) {
      msg.updatedAt = protoscript.parseTimestamp(_updatedAt_);
    }
    return msg;
  },
};
