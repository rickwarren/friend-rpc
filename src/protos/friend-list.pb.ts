// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: src/protos/friend-list.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";

//========================================//
//                 Types                  //
//========================================//

export interface UserId {
  id: string;
}

export interface UserIds {
  id: string;
  id2: string;
}

export interface GetFriendListsResponseDto {
  friends: FriendListDto[];
}

export interface CreateFriendListResponseDto {
  success: boolean;
}

export interface DeleteFriendListResponseDto {
  success: boolean;
}

export interface CreateFriendListDto {
  requesterId: string;
  addresseId: string;
  friendType: string;
}

export interface FriendListDto {
  id: string;
  requesterId: string;
  addresseId: string;
  friendType: string;
  createdAt: string;
  updatedAt: string;
}

//========================================//
//    FriendListProto Protobuf Client     //
//========================================//

export async function getFriendsByUserId(
  userId: UserId,
  config?: ClientConfiguration,
): Promise<GetFriendListsResponseDto> {
  const response = await PBrequest(
    "/FriendListProto/getFriendsByUserId",
    UserId.encode(userId),
    config,
  );
  return GetFriendListsResponseDto.decode(response);
}

export async function getFriendsOfFriendsByUserId(
  userId: UserId,
  config?: ClientConfiguration,
): Promise<GetFriendListsResponseDto> {
  const response = await PBrequest(
    "/FriendListProto/getFriendsOfFriendsByUserId",
    UserId.encode(userId),
    config,
  );
  return GetFriendListsResponseDto.decode(response);
}

export async function addFriend(
  createFriendListDto: CreateFriendListDto,
  config?: ClientConfiguration,
): Promise<CreateFriendListResponseDto> {
  const response = await PBrequest(
    "/FriendListProto/addFriend",
    CreateFriendListDto.encode(createFriendListDto),
    config,
  );
  return CreateFriendListResponseDto.decode(response);
}

export async function removeFriend(
  userIds: UserIds,
  config?: ClientConfiguration,
): Promise<DeleteFriendListResponseDto> {
  const response = await PBrequest(
    "/FriendListProto/removeFriend",
    UserIds.encode(userIds),
    config,
  );
  return DeleteFriendListResponseDto.decode(response);
}

//========================================//
//      FriendListProto JSON Client       //
//========================================//

export async function getFriendsByUserIdJSON(
  userId: UserId,
  config?: ClientConfiguration,
): Promise<GetFriendListsResponseDto> {
  const response = await JSONrequest(
    "/FriendListProto/getFriendsByUserId",
    UserIdJSON.encode(userId),
    config,
  );
  return GetFriendListsResponseDtoJSON.decode(response);
}

export async function getFriendsOfFriendsByUserIdJSON(
  userId: UserId,
  config?: ClientConfiguration,
): Promise<GetFriendListsResponseDto> {
  const response = await JSONrequest(
    "/FriendListProto/getFriendsOfFriendsByUserId",
    UserIdJSON.encode(userId),
    config,
  );
  return GetFriendListsResponseDtoJSON.decode(response);
}

export async function addFriendJSON(
  createFriendListDto: CreateFriendListDto,
  config?: ClientConfiguration,
): Promise<CreateFriendListResponseDto> {
  const response = await JSONrequest(
    "/FriendListProto/addFriend",
    CreateFriendListDtoJSON.encode(createFriendListDto),
    config,
  );
  return CreateFriendListResponseDtoJSON.decode(response);
}

export async function removeFriendJSON(
  userIds: UserIds,
  config?: ClientConfiguration,
): Promise<DeleteFriendListResponseDto> {
  const response = await JSONrequest(
    "/FriendListProto/removeFriend",
    UserIdsJSON.encode(userIds),
    config,
  );
  return DeleteFriendListResponseDtoJSON.decode(response);
}

//========================================//
//            FriendListProto             //
//========================================//

export interface FriendListProto<Context = unknown> {
  getFriendsByUserId: (
    userId: UserId,
    context: Context,
  ) => Promise<GetFriendListsResponseDto> | GetFriendListsResponseDto;
  getFriendsOfFriendsByUserId: (
    userId: UserId,
    context: Context,
  ) => Promise<GetFriendListsResponseDto> | GetFriendListsResponseDto;
  addFriend: (
    createFriendListDto: CreateFriendListDto,
    context: Context,
  ) => Promise<CreateFriendListResponseDto> | CreateFriendListResponseDto;
  removeFriend: (
    userIds: UserIds,
    context: Context,
  ) => Promise<DeleteFriendListResponseDto> | DeleteFriendListResponseDto;
}

export function createFriendListProto<Context>(
  service: FriendListProto<Context>,
) {
  return {
    name: "FriendListProto",
    methods: {
      getFriendsByUserId: {
        name: "getFriendsByUserId",
        handler: service.getFriendsByUserId,
        input: { protobuf: UserId, json: UserIdJSON },
        output: {
          protobuf: GetFriendListsResponseDto,
          json: GetFriendListsResponseDtoJSON,
        },
      },
      getFriendsOfFriendsByUserId: {
        name: "getFriendsOfFriendsByUserId",
        handler: service.getFriendsOfFriendsByUserId,
        input: { protobuf: UserId, json: UserIdJSON },
        output: {
          protobuf: GetFriendListsResponseDto,
          json: GetFriendListsResponseDtoJSON,
        },
      },
      addFriend: {
        name: "addFriend",
        handler: service.addFriend,
        input: { protobuf: CreateFriendListDto, json: CreateFriendListDtoJSON },
        output: {
          protobuf: CreateFriendListResponseDto,
          json: CreateFriendListResponseDtoJSON,
        },
      },
      removeFriend: {
        name: "removeFriend",
        handler: service.removeFriend,
        input: { protobuf: UserIds, json: UserIdsJSON },
        output: {
          protobuf: DeleteFriendListResponseDto,
          json: DeleteFriendListResponseDtoJSON,
        },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const UserId = {
  /**
   * Serializes UserId to protobuf.
   */
  encode: function (msg: PartialDeep<UserId>): Uint8Array {
    return UserId._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes UserId from protobuf.
   */
  decode: function (bytes: ByteSource): UserId {
    return UserId._readMessage(
      UserId.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes UserId with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UserId>): UserId {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UserId>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UserId,
    reader: protoscript.BinaryReader,
  ): UserId {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UserIds = {
  /**
   * Serializes UserIds to protobuf.
   */
  encode: function (msg: PartialDeep<UserIds>): Uint8Array {
    return UserIds._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes UserIds from protobuf.
   */
  decode: function (bytes: ByteSource): UserIds {
    return UserIds._readMessage(
      UserIds.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes UserIds with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UserIds>): UserIds {
    return {
      id: "",
      id2: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UserIds>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.id2) {
      writer.writeString(2, msg.id2);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UserIds,
    reader: protoscript.BinaryReader,
  ): UserIds {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          msg.id2 = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetFriendListsResponseDto = {
  /**
   * Serializes GetFriendListsResponseDto to protobuf.
   */
  encode: function (msg: PartialDeep<GetFriendListsResponseDto>): Uint8Array {
    return GetFriendListsResponseDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetFriendListsResponseDto from protobuf.
   */
  decode: function (bytes: ByteSource): GetFriendListsResponseDto {
    return GetFriendListsResponseDto._readMessage(
      GetFriendListsResponseDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetFriendListsResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetFriendListsResponseDto>,
  ): GetFriendListsResponseDto {
    return {
      friends: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetFriendListsResponseDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.friends?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.friends as any,
        FriendListDto._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetFriendListsResponseDto,
    reader: protoscript.BinaryReader,
  ): GetFriendListsResponseDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = FriendListDto.initialize();
          reader.readMessage(m, FriendListDto._readMessage);
          msg.friends.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateFriendListResponseDto = {
  /**
   * Serializes CreateFriendListResponseDto to protobuf.
   */
  encode: function (msg: PartialDeep<CreateFriendListResponseDto>): Uint8Array {
    return CreateFriendListResponseDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateFriendListResponseDto from protobuf.
   */
  decode: function (bytes: ByteSource): CreateFriendListResponseDto {
    return CreateFriendListResponseDto._readMessage(
      CreateFriendListResponseDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CreateFriendListResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateFriendListResponseDto>,
  ): CreateFriendListResponseDto {
    return {
      success: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateFriendListResponseDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.success) {
      writer.writeBool(1, msg.success);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateFriendListResponseDto,
    reader: protoscript.BinaryReader,
  ): CreateFriendListResponseDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.success = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const DeleteFriendListResponseDto = {
  /**
   * Serializes DeleteFriendListResponseDto to protobuf.
   */
  encode: function (msg: PartialDeep<DeleteFriendListResponseDto>): Uint8Array {
    return DeleteFriendListResponseDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes DeleteFriendListResponseDto from protobuf.
   */
  decode: function (bytes: ByteSource): DeleteFriendListResponseDto {
    return DeleteFriendListResponseDto._readMessage(
      DeleteFriendListResponseDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes DeleteFriendListResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteFriendListResponseDto>,
  ): DeleteFriendListResponseDto {
    return {
      success: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteFriendListResponseDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.success) {
      writer.writeBool(1, msg.success);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteFriendListResponseDto,
    reader: protoscript.BinaryReader,
  ): DeleteFriendListResponseDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.success = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateFriendListDto = {
  /**
   * Serializes CreateFriendListDto to protobuf.
   */
  encode: function (msg: PartialDeep<CreateFriendListDto>): Uint8Array {
    return CreateFriendListDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateFriendListDto from protobuf.
   */
  decode: function (bytes: ByteSource): CreateFriendListDto {
    return CreateFriendListDto._readMessage(
      CreateFriendListDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CreateFriendListDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateFriendListDto>,
  ): CreateFriendListDto {
    return {
      requesterId: "",
      addresseId: "",
      friendType: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateFriendListDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.requesterId) {
      writer.writeString(1, msg.requesterId);
    }
    if (msg.addresseId) {
      writer.writeString(2, msg.addresseId);
    }
    if (msg.friendType) {
      writer.writeString(3, msg.friendType);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateFriendListDto,
    reader: protoscript.BinaryReader,
  ): CreateFriendListDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.requesterId = reader.readString();
          break;
        }
        case 2: {
          msg.addresseId = reader.readString();
          break;
        }
        case 3: {
          msg.friendType = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const FriendListDto = {
  /**
   * Serializes FriendListDto to protobuf.
   */
  encode: function (msg: PartialDeep<FriendListDto>): Uint8Array {
    return FriendListDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes FriendListDto from protobuf.
   */
  decode: function (bytes: ByteSource): FriendListDto {
    return FriendListDto._readMessage(
      FriendListDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes FriendListDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<FriendListDto>): FriendListDto {
    return {
      id: "",
      requesterId: "",
      addresseId: "",
      friendType: "",
      createdAt: "",
      updatedAt: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<FriendListDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.requesterId) {
      writer.writeString(2, msg.requesterId);
    }
    if (msg.addresseId) {
      writer.writeString(3, msg.addresseId);
    }
    if (msg.friendType) {
      writer.writeString(4, msg.friendType);
    }
    if (msg.createdAt) {
      writer.writeString(5, msg.createdAt);
    }
    if (msg.updatedAt) {
      writer.writeString(6, msg.updatedAt);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FriendListDto,
    reader: protoscript.BinaryReader,
  ): FriendListDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          msg.requesterId = reader.readString();
          break;
        }
        case 3: {
          msg.addresseId = reader.readString();
          break;
        }
        case 4: {
          msg.friendType = reader.readString();
          break;
        }
        case 5: {
          msg.createdAt = reader.readString();
          break;
        }
        case 6: {
          msg.updatedAt = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const UserIdJSON = {
  /**
   * Serializes UserId to JSON.
   */
  encode: function (msg: PartialDeep<UserId>): string {
    return JSON.stringify(UserIdJSON._writeMessage(msg));
  },

  /**
   * Deserializes UserId from JSON.
   */
  decode: function (json: string): UserId {
    return UserIdJSON._readMessage(UserIdJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes UserId with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UserId>): UserId {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<UserId>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: UserId, json: any): UserId {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    return msg;
  },
};

export const UserIdsJSON = {
  /**
   * Serializes UserIds to JSON.
   */
  encode: function (msg: PartialDeep<UserIds>): string {
    return JSON.stringify(UserIdsJSON._writeMessage(msg));
  },

  /**
   * Deserializes UserIds from JSON.
   */
  decode: function (json: string): UserIds {
    return UserIdsJSON._readMessage(UserIdsJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes UserIds with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UserIds>): UserIds {
    return {
      id: "",
      id2: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<UserIds>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.id2) {
      json["id2"] = msg.id2;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: UserIds, json: any): UserIds {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _id2_ = json["id2"];
    if (_id2_) {
      msg.id2 = _id2_;
    }
    return msg;
  },
};

export const GetFriendListsResponseDtoJSON = {
  /**
   * Serializes GetFriendListsResponseDto to JSON.
   */
  encode: function (msg: PartialDeep<GetFriendListsResponseDto>): string {
    return JSON.stringify(GetFriendListsResponseDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetFriendListsResponseDto from JSON.
   */
  decode: function (json: string): GetFriendListsResponseDto {
    return GetFriendListsResponseDtoJSON._readMessage(
      GetFriendListsResponseDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetFriendListsResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetFriendListsResponseDto>,
  ): GetFriendListsResponseDto {
    return {
      friends: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetFriendListsResponseDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.friends?.length) {
      json["friends"] = msg.friends.map(FriendListDtoJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetFriendListsResponseDto,
    json: any,
  ): GetFriendListsResponseDto {
    const _friends_ = json["friends"];
    if (_friends_) {
      for (const item of _friends_) {
        const m = FriendListDtoJSON.initialize();
        FriendListDtoJSON._readMessage(m, item);
        msg.friends.push(m);
      }
    }
    return msg;
  },
};

export const CreateFriendListResponseDtoJSON = {
  /**
   * Serializes CreateFriendListResponseDto to JSON.
   */
  encode: function (msg: PartialDeep<CreateFriendListResponseDto>): string {
    return JSON.stringify(CreateFriendListResponseDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateFriendListResponseDto from JSON.
   */
  decode: function (json: string): CreateFriendListResponseDto {
    return CreateFriendListResponseDtoJSON._readMessage(
      CreateFriendListResponseDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CreateFriendListResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateFriendListResponseDto>,
  ): CreateFriendListResponseDto {
    return {
      success: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateFriendListResponseDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.success) {
      json["success"] = msg.success;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateFriendListResponseDto,
    json: any,
  ): CreateFriendListResponseDto {
    const _success_ = json["success"];
    if (_success_) {
      msg.success = _success_;
    }
    return msg;
  },
};

export const DeleteFriendListResponseDtoJSON = {
  /**
   * Serializes DeleteFriendListResponseDto to JSON.
   */
  encode: function (msg: PartialDeep<DeleteFriendListResponseDto>): string {
    return JSON.stringify(DeleteFriendListResponseDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes DeleteFriendListResponseDto from JSON.
   */
  decode: function (json: string): DeleteFriendListResponseDto {
    return DeleteFriendListResponseDtoJSON._readMessage(
      DeleteFriendListResponseDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes DeleteFriendListResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteFriendListResponseDto>,
  ): DeleteFriendListResponseDto {
    return {
      success: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteFriendListResponseDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.success) {
      json["success"] = msg.success;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteFriendListResponseDto,
    json: any,
  ): DeleteFriendListResponseDto {
    const _success_ = json["success"];
    if (_success_) {
      msg.success = _success_;
    }
    return msg;
  },
};

export const CreateFriendListDtoJSON = {
  /**
   * Serializes CreateFriendListDto to JSON.
   */
  encode: function (msg: PartialDeep<CreateFriendListDto>): string {
    return JSON.stringify(CreateFriendListDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateFriendListDto from JSON.
   */
  decode: function (json: string): CreateFriendListDto {
    return CreateFriendListDtoJSON._readMessage(
      CreateFriendListDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CreateFriendListDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateFriendListDto>,
  ): CreateFriendListDto {
    return {
      requesterId: "",
      addresseId: "",
      friendType: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateFriendListDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.requesterId) {
      json["requesterId"] = msg.requesterId;
    }
    if (msg.addresseId) {
      json["addresseId"] = msg.addresseId;
    }
    if (msg.friendType) {
      json["friendType"] = msg.friendType;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateFriendListDto,
    json: any,
  ): CreateFriendListDto {
    const _requesterId_ = json["requesterId"];
    if (_requesterId_) {
      msg.requesterId = _requesterId_;
    }
    const _addresseId_ = json["addresseId"];
    if (_addresseId_) {
      msg.addresseId = _addresseId_;
    }
    const _friendType_ = json["friendType"];
    if (_friendType_) {
      msg.friendType = _friendType_;
    }
    return msg;
  },
};

export const FriendListDtoJSON = {
  /**
   * Serializes FriendListDto to JSON.
   */
  encode: function (msg: PartialDeep<FriendListDto>): string {
    return JSON.stringify(FriendListDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes FriendListDto from JSON.
   */
  decode: function (json: string): FriendListDto {
    return FriendListDtoJSON._readMessage(
      FriendListDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes FriendListDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<FriendListDto>): FriendListDto {
    return {
      id: "",
      requesterId: "",
      addresseId: "",
      friendType: "",
      createdAt: "",
      updatedAt: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<FriendListDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.requesterId) {
      json["requesterId"] = msg.requesterId;
    }
    if (msg.addresseId) {
      json["addresseId"] = msg.addresseId;
    }
    if (msg.friendType) {
      json["friendType"] = msg.friendType;
    }
    if (msg.createdAt) {
      json["createdAt"] = msg.createdAt;
    }
    if (msg.updatedAt) {
      json["updatedAt"] = msg.updatedAt;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: FriendListDto, json: any): FriendListDto {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _requesterId_ = json["requesterId"];
    if (_requesterId_) {
      msg.requesterId = _requesterId_;
    }
    const _addresseId_ = json["addresseId"];
    if (_addresseId_) {
      msg.addresseId = _addresseId_;
    }
    const _friendType_ = json["friendType"];
    if (_friendType_) {
      msg.friendType = _friendType_;
    }
    const _createdAt_ = json["createdAt"];
    if (_createdAt_) {
      msg.createdAt = _createdAt_;
    }
    const _updatedAt_ = json["updatedAt"];
    if (_updatedAt_) {
      msg.updatedAt = _updatedAt_;
    }
    return msg;
  },
};
