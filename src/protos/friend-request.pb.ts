// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: src/protos/friend-request.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";

//========================================//
//                 Types                  //
//========================================//

export interface GetFriendRequestDto {
  requesterId: string;
  addresseId: string;
}

export interface GetFriendRequestResponseDto {
  requests: FriendRequest[];
}

export interface DeleteFriendRequestResponseDto {
  success: boolean;
}

export interface FriendRequestResponseDto {
  success: boolean;
}

export interface Id {
  id: string;
}

export interface FriendRequestId {
  id: string;
}

export interface UpdateFriendRequestDto {
  id: string;
  requesterId: string;
  addresseId: string;
  status: string;
  createdAt: protoscript.Timestamp;
  updatedAt: protoscript.Timestamp;
}

export interface CreateFriendRequestDto {
  requesterId: string;
  addresseId: string;
  status: string;
}

export interface FriendRequest {
  id: string;
  requesterId: string;
  addresseId: string;
  status: string;
  createdAt: protoscript.Timestamp;
  updatedAt: protoscript.Timestamp;
}

//========================================//
//   FriendRequestProto Protobuf Client   //
//========================================//

export async function getFriendRequestsByUserId(
  id: Id,
  config?: ClientConfiguration,
): Promise<GetFriendRequestResponseDto> {
  const response = await PBrequest(
    "/FriendRequestProto/getFriendRequestsByUserId",
    Id.encode(id),
    config,
  );
  return GetFriendRequestResponseDto.decode(response);
}

export async function getFriendRequestsByRequesterId(
  id: Id,
  config?: ClientConfiguration,
): Promise<GetFriendRequestResponseDto> {
  const response = await PBrequest(
    "/FriendRequestProto/getFriendRequestsByRequesterId",
    Id.encode(id),
    config,
  );
  return GetFriendRequestResponseDto.decode(response);
}

export async function getFriendRequest(
  getFriendRequestDto: GetFriendRequestDto,
  config?: ClientConfiguration,
): Promise<FriendRequest> {
  const response = await PBrequest(
    "/FriendRequestProto/getFriendRequest",
    GetFriendRequestDto.encode(getFriendRequestDto),
    config,
  );
  return FriendRequest.decode(response);
}

export async function createFriendRequest(
  createFriendRequestDto: CreateFriendRequestDto,
  config?: ClientConfiguration,
): Promise<FriendRequest> {
  const response = await PBrequest(
    "/FriendRequestProto/createFriendRequest",
    CreateFriendRequestDto.encode(createFriendRequestDto),
    config,
  );
  return FriendRequest.decode(response);
}

export async function updateFriendRequest(
  updateFriendRequestDto: UpdateFriendRequestDto,
  config?: ClientConfiguration,
): Promise<FriendRequest> {
  const response = await PBrequest(
    "/FriendRequestProto/updateFriendRequest",
    UpdateFriendRequestDto.encode(updateFriendRequestDto),
    config,
  );
  return FriendRequest.decode(response);
}

export async function deleteFriendRequest(
  friendRequestId: FriendRequestId,
  config?: ClientConfiguration,
): Promise<DeleteFriendRequestResponseDto> {
  const response = await PBrequest(
    "/FriendRequestProto/deleteFriendRequest",
    FriendRequestId.encode(friendRequestId),
    config,
  );
  return DeleteFriendRequestResponseDto.decode(response);
}

export async function acceptFriendRequest(
  friendRequestId: FriendRequestId,
  config?: ClientConfiguration,
): Promise<FriendRequestResponseDto> {
  const response = await PBrequest(
    "/FriendRequestProto/acceptFriendRequest",
    FriendRequestId.encode(friendRequestId),
    config,
  );
  return FriendRequestResponseDto.decode(response);
}

export async function rejectFriendRequest(
  friendRequestId: FriendRequestId,
  config?: ClientConfiguration,
): Promise<FriendRequestResponseDto> {
  const response = await PBrequest(
    "/FriendRequestProto/rejectFriendRequest",
    FriendRequestId.encode(friendRequestId),
    config,
  );
  return FriendRequestResponseDto.decode(response);
}

//========================================//
//     FriendRequestProto JSON Client     //
//========================================//

export async function getFriendRequestsByUserIdJSON(
  id: Id,
  config?: ClientConfiguration,
): Promise<GetFriendRequestResponseDto> {
  const response = await JSONrequest(
    "/FriendRequestProto/getFriendRequestsByUserId",
    IdJSON.encode(id),
    config,
  );
  return GetFriendRequestResponseDtoJSON.decode(response);
}

export async function getFriendRequestsByRequesterIdJSON(
  id: Id,
  config?: ClientConfiguration,
): Promise<GetFriendRequestResponseDto> {
  const response = await JSONrequest(
    "/FriendRequestProto/getFriendRequestsByRequesterId",
    IdJSON.encode(id),
    config,
  );
  return GetFriendRequestResponseDtoJSON.decode(response);
}

export async function getFriendRequestJSON(
  getFriendRequestDto: GetFriendRequestDto,
  config?: ClientConfiguration,
): Promise<FriendRequest> {
  const response = await JSONrequest(
    "/FriendRequestProto/getFriendRequest",
    GetFriendRequestDtoJSON.encode(getFriendRequestDto),
    config,
  );
  return FriendRequestJSON.decode(response);
}

export async function createFriendRequestJSON(
  createFriendRequestDto: CreateFriendRequestDto,
  config?: ClientConfiguration,
): Promise<FriendRequest> {
  const response = await JSONrequest(
    "/FriendRequestProto/createFriendRequest",
    CreateFriendRequestDtoJSON.encode(createFriendRequestDto),
    config,
  );
  return FriendRequestJSON.decode(response);
}

export async function updateFriendRequestJSON(
  updateFriendRequestDto: UpdateFriendRequestDto,
  config?: ClientConfiguration,
): Promise<FriendRequest> {
  const response = await JSONrequest(
    "/FriendRequestProto/updateFriendRequest",
    UpdateFriendRequestDtoJSON.encode(updateFriendRequestDto),
    config,
  );
  return FriendRequestJSON.decode(response);
}

export async function deleteFriendRequestJSON(
  friendRequestId: FriendRequestId,
  config?: ClientConfiguration,
): Promise<DeleteFriendRequestResponseDto> {
  const response = await JSONrequest(
    "/FriendRequestProto/deleteFriendRequest",
    FriendRequestIdJSON.encode(friendRequestId),
    config,
  );
  return DeleteFriendRequestResponseDtoJSON.decode(response);
}

export async function acceptFriendRequestJSON(
  friendRequestId: FriendRequestId,
  config?: ClientConfiguration,
): Promise<FriendRequestResponseDto> {
  const response = await JSONrequest(
    "/FriendRequestProto/acceptFriendRequest",
    FriendRequestIdJSON.encode(friendRequestId),
    config,
  );
  return FriendRequestResponseDtoJSON.decode(response);
}

export async function rejectFriendRequestJSON(
  friendRequestId: FriendRequestId,
  config?: ClientConfiguration,
): Promise<FriendRequestResponseDto> {
  const response = await JSONrequest(
    "/FriendRequestProto/rejectFriendRequest",
    FriendRequestIdJSON.encode(friendRequestId),
    config,
  );
  return FriendRequestResponseDtoJSON.decode(response);
}

//========================================//
//           FriendRequestProto           //
//========================================//

export interface FriendRequestProto<Context = unknown> {
  getFriendRequestsByUserId: (
    id: Id,
    context: Context,
  ) => Promise<GetFriendRequestResponseDto> | GetFriendRequestResponseDto;
  getFriendRequestsByRequesterId: (
    id: Id,
    context: Context,
  ) => Promise<GetFriendRequestResponseDto> | GetFriendRequestResponseDto;
  getFriendRequest: (
    getFriendRequestDto: GetFriendRequestDto,
    context: Context,
  ) => Promise<FriendRequest> | FriendRequest;
  createFriendRequest: (
    createFriendRequestDto: CreateFriendRequestDto,
    context: Context,
  ) => Promise<FriendRequest> | FriendRequest;
  updateFriendRequest: (
    updateFriendRequestDto: UpdateFriendRequestDto,
    context: Context,
  ) => Promise<FriendRequest> | FriendRequest;
  deleteFriendRequest: (
    friendRequestId: FriendRequestId,
    context: Context,
  ) => Promise<DeleteFriendRequestResponseDto> | DeleteFriendRequestResponseDto;
  acceptFriendRequest: (
    friendRequestId: FriendRequestId,
    context: Context,
  ) => Promise<FriendRequestResponseDto> | FriendRequestResponseDto;
  rejectFriendRequest: (
    friendRequestId: FriendRequestId,
    context: Context,
  ) => Promise<FriendRequestResponseDto> | FriendRequestResponseDto;
}

export function createFriendRequestProto<Context>(
  service: FriendRequestProto<Context>,
) {
  return {
    name: "FriendRequestProto",
    methods: {
      getFriendRequestsByUserId: {
        name: "getFriendRequestsByUserId",
        handler: service.getFriendRequestsByUserId,
        input: { protobuf: Id, json: IdJSON },
        output: {
          protobuf: GetFriendRequestResponseDto,
          json: GetFriendRequestResponseDtoJSON,
        },
      },
      getFriendRequestsByRequesterId: {
        name: "getFriendRequestsByRequesterId",
        handler: service.getFriendRequestsByRequesterId,
        input: { protobuf: Id, json: IdJSON },
        output: {
          protobuf: GetFriendRequestResponseDto,
          json: GetFriendRequestResponseDtoJSON,
        },
      },
      getFriendRequest: {
        name: "getFriendRequest",
        handler: service.getFriendRequest,
        input: { protobuf: GetFriendRequestDto, json: GetFriendRequestDtoJSON },
        output: { protobuf: FriendRequest, json: FriendRequestJSON },
      },
      createFriendRequest: {
        name: "createFriendRequest",
        handler: service.createFriendRequest,
        input: {
          protobuf: CreateFriendRequestDto,
          json: CreateFriendRequestDtoJSON,
        },
        output: { protobuf: FriendRequest, json: FriendRequestJSON },
      },
      updateFriendRequest: {
        name: "updateFriendRequest",
        handler: service.updateFriendRequest,
        input: {
          protobuf: UpdateFriendRequestDto,
          json: UpdateFriendRequestDtoJSON,
        },
        output: { protobuf: FriendRequest, json: FriendRequestJSON },
      },
      deleteFriendRequest: {
        name: "deleteFriendRequest",
        handler: service.deleteFriendRequest,
        input: { protobuf: FriendRequestId, json: FriendRequestIdJSON },
        output: {
          protobuf: DeleteFriendRequestResponseDto,
          json: DeleteFriendRequestResponseDtoJSON,
        },
      },
      acceptFriendRequest: {
        name: "acceptFriendRequest",
        handler: service.acceptFriendRequest,
        input: { protobuf: FriendRequestId, json: FriendRequestIdJSON },
        output: {
          protobuf: FriendRequestResponseDto,
          json: FriendRequestResponseDtoJSON,
        },
      },
      rejectFriendRequest: {
        name: "rejectFriendRequest",
        handler: service.rejectFriendRequest,
        input: { protobuf: FriendRequestId, json: FriendRequestIdJSON },
        output: {
          protobuf: FriendRequestResponseDto,
          json: FriendRequestResponseDtoJSON,
        },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const GetFriendRequestDto = {
  /**
   * Serializes GetFriendRequestDto to protobuf.
   */
  encode: function (msg: PartialDeep<GetFriendRequestDto>): Uint8Array {
    return GetFriendRequestDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetFriendRequestDto from protobuf.
   */
  decode: function (bytes: ByteSource): GetFriendRequestDto {
    return GetFriendRequestDto._readMessage(
      GetFriendRequestDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetFriendRequestDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetFriendRequestDto>,
  ): GetFriendRequestDto {
    return {
      requesterId: "",
      addresseId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetFriendRequestDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.requesterId) {
      writer.writeString(1, msg.requesterId);
    }
    if (msg.addresseId) {
      writer.writeString(2, msg.addresseId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetFriendRequestDto,
    reader: protoscript.BinaryReader,
  ): GetFriendRequestDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.requesterId = reader.readString();
          break;
        }
        case 2: {
          msg.addresseId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetFriendRequestResponseDto = {
  /**
   * Serializes GetFriendRequestResponseDto to protobuf.
   */
  encode: function (msg: PartialDeep<GetFriendRequestResponseDto>): Uint8Array {
    return GetFriendRequestResponseDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetFriendRequestResponseDto from protobuf.
   */
  decode: function (bytes: ByteSource): GetFriendRequestResponseDto {
    return GetFriendRequestResponseDto._readMessage(
      GetFriendRequestResponseDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetFriendRequestResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetFriendRequestResponseDto>,
  ): GetFriendRequestResponseDto {
    return {
      requests: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetFriendRequestResponseDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.requests?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.requests as any,
        FriendRequest._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetFriendRequestResponseDto,
    reader: protoscript.BinaryReader,
  ): GetFriendRequestResponseDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = FriendRequest.initialize();
          reader.readMessage(m, FriendRequest._readMessage);
          msg.requests.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const DeleteFriendRequestResponseDto = {
  /**
   * Serializes DeleteFriendRequestResponseDto to protobuf.
   */
  encode: function (
    msg: PartialDeep<DeleteFriendRequestResponseDto>,
  ): Uint8Array {
    return DeleteFriendRequestResponseDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes DeleteFriendRequestResponseDto from protobuf.
   */
  decode: function (bytes: ByteSource): DeleteFriendRequestResponseDto {
    return DeleteFriendRequestResponseDto._readMessage(
      DeleteFriendRequestResponseDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes DeleteFriendRequestResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteFriendRequestResponseDto>,
  ): DeleteFriendRequestResponseDto {
    return {
      success: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteFriendRequestResponseDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.success) {
      writer.writeBool(1, msg.success);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteFriendRequestResponseDto,
    reader: protoscript.BinaryReader,
  ): DeleteFriendRequestResponseDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.success = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const FriendRequestResponseDto = {
  /**
   * Serializes FriendRequestResponseDto to protobuf.
   */
  encode: function (msg: PartialDeep<FriendRequestResponseDto>): Uint8Array {
    return FriendRequestResponseDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes FriendRequestResponseDto from protobuf.
   */
  decode: function (bytes: ByteSource): FriendRequestResponseDto {
    return FriendRequestResponseDto._readMessage(
      FriendRequestResponseDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes FriendRequestResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<FriendRequestResponseDto>,
  ): FriendRequestResponseDto {
    return {
      success: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<FriendRequestResponseDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.success) {
      writer.writeBool(1, msg.success);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FriendRequestResponseDto,
    reader: protoscript.BinaryReader,
  ): FriendRequestResponseDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.success = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Id = {
  /**
   * Serializes Id to protobuf.
   */
  encode: function (msg: PartialDeep<Id>): Uint8Array {
    return Id._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Id from protobuf.
   */
  decode: function (bytes: ByteSource): Id {
    return Id._readMessage(
      Id.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Id with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Id>): Id {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Id>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Id, reader: protoscript.BinaryReader): Id {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const FriendRequestId = {
  /**
   * Serializes FriendRequestId to protobuf.
   */
  encode: function (msg: PartialDeep<FriendRequestId>): Uint8Array {
    return FriendRequestId._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes FriendRequestId from protobuf.
   */
  decode: function (bytes: ByteSource): FriendRequestId {
    return FriendRequestId._readMessage(
      FriendRequestId.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes FriendRequestId with all fields set to their default value.
   */
  initialize: function (msg?: Partial<FriendRequestId>): FriendRequestId {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<FriendRequestId>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FriendRequestId,
    reader: protoscript.BinaryReader,
  ): FriendRequestId {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UpdateFriendRequestDto = {
  /**
   * Serializes UpdateFriendRequestDto to protobuf.
   */
  encode: function (msg: PartialDeep<UpdateFriendRequestDto>): Uint8Array {
    return UpdateFriendRequestDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes UpdateFriendRequestDto from protobuf.
   */
  decode: function (bytes: ByteSource): UpdateFriendRequestDto {
    return UpdateFriendRequestDto._readMessage(
      UpdateFriendRequestDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes UpdateFriendRequestDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<UpdateFriendRequestDto>,
  ): UpdateFriendRequestDto {
    return {
      id: "",
      requesterId: "",
      addresseId: "",
      status: "",
      createdAt: protoscript.Timestamp.initialize(),
      updatedAt: protoscript.Timestamp.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdateFriendRequestDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.requesterId) {
      writer.writeString(2, msg.requesterId);
    }
    if (msg.addresseId) {
      writer.writeString(3, msg.addresseId);
    }
    if (msg.status) {
      writer.writeString(4, msg.status);
    }
    if (msg.createdAt) {
      writer.writeMessage(
        5,
        msg.createdAt,
        protoscript.Timestamp._writeMessage,
      );
    }
    if (msg.updatedAt) {
      writer.writeMessage(
        6,
        msg.updatedAt,
        protoscript.Timestamp._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateFriendRequestDto,
    reader: protoscript.BinaryReader,
  ): UpdateFriendRequestDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          msg.requesterId = reader.readString();
          break;
        }
        case 3: {
          msg.addresseId = reader.readString();
          break;
        }
        case 4: {
          msg.status = reader.readString();
          break;
        }
        case 5: {
          reader.readMessage(msg.createdAt, protoscript.Timestamp._readMessage);
          break;
        }
        case 6: {
          reader.readMessage(msg.updatedAt, protoscript.Timestamp._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateFriendRequestDto = {
  /**
   * Serializes CreateFriendRequestDto to protobuf.
   */
  encode: function (msg: PartialDeep<CreateFriendRequestDto>): Uint8Array {
    return CreateFriendRequestDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateFriendRequestDto from protobuf.
   */
  decode: function (bytes: ByteSource): CreateFriendRequestDto {
    return CreateFriendRequestDto._readMessage(
      CreateFriendRequestDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CreateFriendRequestDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateFriendRequestDto>,
  ): CreateFriendRequestDto {
    return {
      requesterId: "",
      addresseId: "",
      status: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateFriendRequestDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.requesterId) {
      writer.writeString(1, msg.requesterId);
    }
    if (msg.addresseId) {
      writer.writeString(2, msg.addresseId);
    }
    if (msg.status) {
      writer.writeString(3, msg.status);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateFriendRequestDto,
    reader: protoscript.BinaryReader,
  ): CreateFriendRequestDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.requesterId = reader.readString();
          break;
        }
        case 2: {
          msg.addresseId = reader.readString();
          break;
        }
        case 3: {
          msg.status = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const FriendRequest = {
  /**
   * Serializes FriendRequest to protobuf.
   */
  encode: function (msg: PartialDeep<FriendRequest>): Uint8Array {
    return FriendRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes FriendRequest from protobuf.
   */
  decode: function (bytes: ByteSource): FriendRequest {
    return FriendRequest._readMessage(
      FriendRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes FriendRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<FriendRequest>): FriendRequest {
    return {
      id: "",
      requesterId: "",
      addresseId: "",
      status: "",
      createdAt: protoscript.Timestamp.initialize(),
      updatedAt: protoscript.Timestamp.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<FriendRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.requesterId) {
      writer.writeString(2, msg.requesterId);
    }
    if (msg.addresseId) {
      writer.writeString(3, msg.addresseId);
    }
    if (msg.status) {
      writer.writeString(4, msg.status);
    }
    if (msg.createdAt) {
      writer.writeMessage(
        5,
        msg.createdAt,
        protoscript.Timestamp._writeMessage,
      );
    }
    if (msg.updatedAt) {
      writer.writeMessage(
        6,
        msg.updatedAt,
        protoscript.Timestamp._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FriendRequest,
    reader: protoscript.BinaryReader,
  ): FriendRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          msg.requesterId = reader.readString();
          break;
        }
        case 3: {
          msg.addresseId = reader.readString();
          break;
        }
        case 4: {
          msg.status = reader.readString();
          break;
        }
        case 5: {
          reader.readMessage(msg.createdAt, protoscript.Timestamp._readMessage);
          break;
        }
        case 6: {
          reader.readMessage(msg.updatedAt, protoscript.Timestamp._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const GetFriendRequestDtoJSON = {
  /**
   * Serializes GetFriendRequestDto to JSON.
   */
  encode: function (msg: PartialDeep<GetFriendRequestDto>): string {
    return JSON.stringify(GetFriendRequestDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetFriendRequestDto from JSON.
   */
  decode: function (json: string): GetFriendRequestDto {
    return GetFriendRequestDtoJSON._readMessage(
      GetFriendRequestDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetFriendRequestDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetFriendRequestDto>,
  ): GetFriendRequestDto {
    return {
      requesterId: "",
      addresseId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetFriendRequestDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.requesterId) {
      json["requesterId"] = msg.requesterId;
    }
    if (msg.addresseId) {
      json["addresseId"] = msg.addresseId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetFriendRequestDto,
    json: any,
  ): GetFriendRequestDto {
    const _requesterId_ = json["requesterId"];
    if (_requesterId_) {
      msg.requesterId = _requesterId_;
    }
    const _addresseId_ = json["addresseId"];
    if (_addresseId_) {
      msg.addresseId = _addresseId_;
    }
    return msg;
  },
};

export const GetFriendRequestResponseDtoJSON = {
  /**
   * Serializes GetFriendRequestResponseDto to JSON.
   */
  encode: function (msg: PartialDeep<GetFriendRequestResponseDto>): string {
    return JSON.stringify(GetFriendRequestResponseDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetFriendRequestResponseDto from JSON.
   */
  decode: function (json: string): GetFriendRequestResponseDto {
    return GetFriendRequestResponseDtoJSON._readMessage(
      GetFriendRequestResponseDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetFriendRequestResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetFriendRequestResponseDto>,
  ): GetFriendRequestResponseDto {
    return {
      requests: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetFriendRequestResponseDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.requests?.length) {
      json["requests"] = msg.requests.map(FriendRequestJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetFriendRequestResponseDto,
    json: any,
  ): GetFriendRequestResponseDto {
    const _requests_ = json["requests"];
    if (_requests_) {
      for (const item of _requests_) {
        const m = FriendRequestJSON.initialize();
        FriendRequestJSON._readMessage(m, item);
        msg.requests.push(m);
      }
    }
    return msg;
  },
};

export const DeleteFriendRequestResponseDtoJSON = {
  /**
   * Serializes DeleteFriendRequestResponseDto to JSON.
   */
  encode: function (msg: PartialDeep<DeleteFriendRequestResponseDto>): string {
    return JSON.stringify(
      DeleteFriendRequestResponseDtoJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes DeleteFriendRequestResponseDto from JSON.
   */
  decode: function (json: string): DeleteFriendRequestResponseDto {
    return DeleteFriendRequestResponseDtoJSON._readMessage(
      DeleteFriendRequestResponseDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes DeleteFriendRequestResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteFriendRequestResponseDto>,
  ): DeleteFriendRequestResponseDto {
    return {
      success: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteFriendRequestResponseDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.success) {
      json["success"] = msg.success;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteFriendRequestResponseDto,
    json: any,
  ): DeleteFriendRequestResponseDto {
    const _success_ = json["success"];
    if (_success_) {
      msg.success = _success_;
    }
    return msg;
  },
};

export const FriendRequestResponseDtoJSON = {
  /**
   * Serializes FriendRequestResponseDto to JSON.
   */
  encode: function (msg: PartialDeep<FriendRequestResponseDto>): string {
    return JSON.stringify(FriendRequestResponseDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes FriendRequestResponseDto from JSON.
   */
  decode: function (json: string): FriendRequestResponseDto {
    return FriendRequestResponseDtoJSON._readMessage(
      FriendRequestResponseDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes FriendRequestResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<FriendRequestResponseDto>,
  ): FriendRequestResponseDto {
    return {
      success: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<FriendRequestResponseDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.success) {
      json["success"] = msg.success;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FriendRequestResponseDto,
    json: any,
  ): FriendRequestResponseDto {
    const _success_ = json["success"];
    if (_success_) {
      msg.success = _success_;
    }
    return msg;
  },
};

export const IdJSON = {
  /**
   * Serializes Id to JSON.
   */
  encode: function (msg: PartialDeep<Id>): string {
    return JSON.stringify(IdJSON._writeMessage(msg));
  },

  /**
   * Deserializes Id from JSON.
   */
  decode: function (json: string): Id {
    return IdJSON._readMessage(IdJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Id with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Id>): Id {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<Id>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Id, json: any): Id {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    return msg;
  },
};

export const FriendRequestIdJSON = {
  /**
   * Serializes FriendRequestId to JSON.
   */
  encode: function (msg: PartialDeep<FriendRequestId>): string {
    return JSON.stringify(FriendRequestIdJSON._writeMessage(msg));
  },

  /**
   * Deserializes FriendRequestId from JSON.
   */
  decode: function (json: string): FriendRequestId {
    return FriendRequestIdJSON._readMessage(
      FriendRequestIdJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes FriendRequestId with all fields set to their default value.
   */
  initialize: function (msg?: Partial<FriendRequestId>): FriendRequestId {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<FriendRequestId>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: FriendRequestId, json: any): FriendRequestId {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    return msg;
  },
};

export const UpdateFriendRequestDtoJSON = {
  /**
   * Serializes UpdateFriendRequestDto to JSON.
   */
  encode: function (msg: PartialDeep<UpdateFriendRequestDto>): string {
    return JSON.stringify(UpdateFriendRequestDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes UpdateFriendRequestDto from JSON.
   */
  decode: function (json: string): UpdateFriendRequestDto {
    return UpdateFriendRequestDtoJSON._readMessage(
      UpdateFriendRequestDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes UpdateFriendRequestDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<UpdateFriendRequestDto>,
  ): UpdateFriendRequestDto {
    return {
      id: "",
      requesterId: "",
      addresseId: "",
      status: "",
      createdAt: protoscript.TimestampJSON.initialize(),
      updatedAt: protoscript.TimestampJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdateFriendRequestDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.requesterId) {
      json["requesterId"] = msg.requesterId;
    }
    if (msg.addresseId) {
      json["addresseId"] = msg.addresseId;
    }
    if (msg.status) {
      json["status"] = msg.status;
    }
    if (msg.createdAt && msg.createdAt.seconds && msg.createdAt.nanos) {
      json["createdAt"] = protoscript.serializeTimestamp(msg.createdAt);
    }
    if (msg.updatedAt && msg.updatedAt.seconds && msg.updatedAt.nanos) {
      json["updatedAt"] = protoscript.serializeTimestamp(msg.updatedAt);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateFriendRequestDto,
    json: any,
  ): UpdateFriendRequestDto {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _requesterId_ = json["requesterId"];
    if (_requesterId_) {
      msg.requesterId = _requesterId_;
    }
    const _addresseId_ = json["addresseId"];
    if (_addresseId_) {
      msg.addresseId = _addresseId_;
    }
    const _status_ = json["status"];
    if (_status_) {
      msg.status = _status_;
    }
    const _createdAt_ = json["createdAt"];
    if (_createdAt_) {
      msg.createdAt = protoscript.parseTimestamp(_createdAt_);
    }
    const _updatedAt_ = json["updatedAt"];
    if (_updatedAt_) {
      msg.updatedAt = protoscript.parseTimestamp(_updatedAt_);
    }
    return msg;
  },
};

export const CreateFriendRequestDtoJSON = {
  /**
   * Serializes CreateFriendRequestDto to JSON.
   */
  encode: function (msg: PartialDeep<CreateFriendRequestDto>): string {
    return JSON.stringify(CreateFriendRequestDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateFriendRequestDto from JSON.
   */
  decode: function (json: string): CreateFriendRequestDto {
    return CreateFriendRequestDtoJSON._readMessage(
      CreateFriendRequestDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CreateFriendRequestDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateFriendRequestDto>,
  ): CreateFriendRequestDto {
    return {
      requesterId: "",
      addresseId: "",
      status: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateFriendRequestDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.requesterId) {
      json["requesterId"] = msg.requesterId;
    }
    if (msg.addresseId) {
      json["addresseId"] = msg.addresseId;
    }
    if (msg.status) {
      json["status"] = msg.status;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateFriendRequestDto,
    json: any,
  ): CreateFriendRequestDto {
    const _requesterId_ = json["requesterId"];
    if (_requesterId_) {
      msg.requesterId = _requesterId_;
    }
    const _addresseId_ = json["addresseId"];
    if (_addresseId_) {
      msg.addresseId = _addresseId_;
    }
    const _status_ = json["status"];
    if (_status_) {
      msg.status = _status_;
    }
    return msg;
  },
};

export const FriendRequestJSON = {
  /**
   * Serializes FriendRequest to JSON.
   */
  encode: function (msg: PartialDeep<FriendRequest>): string {
    return JSON.stringify(FriendRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes FriendRequest from JSON.
   */
  decode: function (json: string): FriendRequest {
    return FriendRequestJSON._readMessage(
      FriendRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes FriendRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<FriendRequest>): FriendRequest {
    return {
      id: "",
      requesterId: "",
      addresseId: "",
      status: "",
      createdAt: protoscript.TimestampJSON.initialize(),
      updatedAt: protoscript.TimestampJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<FriendRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.requesterId) {
      json["requesterId"] = msg.requesterId;
    }
    if (msg.addresseId) {
      json["addresseId"] = msg.addresseId;
    }
    if (msg.status) {
      json["status"] = msg.status;
    }
    if (msg.createdAt && msg.createdAt.seconds && msg.createdAt.nanos) {
      json["createdAt"] = protoscript.serializeTimestamp(msg.createdAt);
    }
    if (msg.updatedAt && msg.updatedAt.seconds && msg.updatedAt.nanos) {
      json["updatedAt"] = protoscript.serializeTimestamp(msg.updatedAt);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: FriendRequest, json: any): FriendRequest {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _requesterId_ = json["requesterId"];
    if (_requesterId_) {
      msg.requesterId = _requesterId_;
    }
    const _addresseId_ = json["addresseId"];
    if (_addresseId_) {
      msg.addresseId = _addresseId_;
    }
    const _status_ = json["status"];
    if (_status_) {
      msg.status = _status_;
    }
    const _createdAt_ = json["createdAt"];
    if (_createdAt_) {
      msg.createdAt = protoscript.parseTimestamp(_createdAt_);
    }
    const _updatedAt_ = json["updatedAt"];
    if (_updatedAt_) {
      msg.updatedAt = protoscript.parseTimestamp(_updatedAt_);
    }
    return msg;
  },
};
