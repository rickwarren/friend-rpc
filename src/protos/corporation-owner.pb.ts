// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: src/protos/corporation-owner.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";

//========================================//
//                 Types                  //
//========================================//

export interface CorporationID {
  id: string;
}

export interface GetCorporationOwnersResponseDto {
  corporationOwners: CorporationOwnerDto[];
}

export interface DeleteCorporationOwnerResponseDto {
  success: boolean;
}

export interface CreateCorporationOwnerDto {
  userId: string;
  corporationId: string;
}

export interface CorporationOwnerDto {
  id: string;
  userId: string;
  corporationId: string;
  createdAt: string;
  updatedAt: string;
}

//========================================//
// CorporationOwnerProto Protobuf Client  //
//========================================//

export async function getCorporationOwners(
  corporationID: CorporationID,
  config?: ClientConfiguration,
): Promise<GetCorporationOwnersResponseDto> {
  const response = await PBrequest(
    "/CorporationOwnerProto/getCorporationOwners",
    CorporationID.encode(corporationID),
    config,
  );
  return GetCorporationOwnersResponseDto.decode(response);
}

export async function createCorporationOwner(
  createCorporationOwnerDto: CreateCorporationOwnerDto,
  config?: ClientConfiguration,
): Promise<CorporationOwnerDto> {
  const response = await PBrequest(
    "/CorporationOwnerProto/createCorporationOwner",
    CreateCorporationOwnerDto.encode(createCorporationOwnerDto),
    config,
  );
  return CorporationOwnerDto.decode(response);
}

export async function deleteCorporationOwner(
  corporationID: CorporationID,
  config?: ClientConfiguration,
): Promise<DeleteCorporationOwnerResponseDto> {
  const response = await PBrequest(
    "/CorporationOwnerProto/deleteCorporationOwner",
    CorporationID.encode(corporationID),
    config,
  );
  return DeleteCorporationOwnerResponseDto.decode(response);
}

//========================================//
//   CorporationOwnerProto JSON Client    //
//========================================//

export async function getCorporationOwnersJSON(
  corporationID: CorporationID,
  config?: ClientConfiguration,
): Promise<GetCorporationOwnersResponseDto> {
  const response = await JSONrequest(
    "/CorporationOwnerProto/getCorporationOwners",
    CorporationIDJSON.encode(corporationID),
    config,
  );
  return GetCorporationOwnersResponseDtoJSON.decode(response);
}

export async function createCorporationOwnerJSON(
  createCorporationOwnerDto: CreateCorporationOwnerDto,
  config?: ClientConfiguration,
): Promise<CorporationOwnerDto> {
  const response = await JSONrequest(
    "/CorporationOwnerProto/createCorporationOwner",
    CreateCorporationOwnerDtoJSON.encode(createCorporationOwnerDto),
    config,
  );
  return CorporationOwnerDtoJSON.decode(response);
}

export async function deleteCorporationOwnerJSON(
  corporationID: CorporationID,
  config?: ClientConfiguration,
): Promise<DeleteCorporationOwnerResponseDto> {
  const response = await JSONrequest(
    "/CorporationOwnerProto/deleteCorporationOwner",
    CorporationIDJSON.encode(corporationID),
    config,
  );
  return DeleteCorporationOwnerResponseDtoJSON.decode(response);
}

//========================================//
//         CorporationOwnerProto          //
//========================================//

export interface CorporationOwnerProto<Context = unknown> {
  getCorporationOwners: (
    corporationID: CorporationID,
    context: Context,
  ) =>
    | Promise<GetCorporationOwnersResponseDto>
    | GetCorporationOwnersResponseDto;
  createCorporationOwner: (
    createCorporationOwnerDto: CreateCorporationOwnerDto,
    context: Context,
  ) => Promise<CorporationOwnerDto> | CorporationOwnerDto;
  deleteCorporationOwner: (
    corporationID: CorporationID,
    context: Context,
  ) =>
    | Promise<DeleteCorporationOwnerResponseDto>
    | DeleteCorporationOwnerResponseDto;
}

export function createCorporationOwnerProto<Context>(
  service: CorporationOwnerProto<Context>,
) {
  return {
    name: "CorporationOwnerProto",
    methods: {
      getCorporationOwners: {
        name: "getCorporationOwners",
        handler: service.getCorporationOwners,
        input: { protobuf: CorporationID, json: CorporationIDJSON },
        output: {
          protobuf: GetCorporationOwnersResponseDto,
          json: GetCorporationOwnersResponseDtoJSON,
        },
      },
      createCorporationOwner: {
        name: "createCorporationOwner",
        handler: service.createCorporationOwner,
        input: {
          protobuf: CreateCorporationOwnerDto,
          json: CreateCorporationOwnerDtoJSON,
        },
        output: {
          protobuf: CorporationOwnerDto,
          json: CorporationOwnerDtoJSON,
        },
      },
      deleteCorporationOwner: {
        name: "deleteCorporationOwner",
        handler: service.deleteCorporationOwner,
        input: { protobuf: CorporationID, json: CorporationIDJSON },
        output: {
          protobuf: DeleteCorporationOwnerResponseDto,
          json: DeleteCorporationOwnerResponseDtoJSON,
        },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const CorporationID = {
  /**
   * Serializes CorporationID to protobuf.
   */
  encode: function (msg: PartialDeep<CorporationID>): Uint8Array {
    return CorporationID._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CorporationID from protobuf.
   */
  decode: function (bytes: ByteSource): CorporationID {
    return CorporationID._readMessage(
      CorporationID.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CorporationID with all fields set to their default value.
   */
  initialize: function (msg?: Partial<CorporationID>): CorporationID {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CorporationID>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CorporationID,
    reader: protoscript.BinaryReader,
  ): CorporationID {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetCorporationOwnersResponseDto = {
  /**
   * Serializes GetCorporationOwnersResponseDto to protobuf.
   */
  encode: function (
    msg: PartialDeep<GetCorporationOwnersResponseDto>,
  ): Uint8Array {
    return GetCorporationOwnersResponseDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetCorporationOwnersResponseDto from protobuf.
   */
  decode: function (bytes: ByteSource): GetCorporationOwnersResponseDto {
    return GetCorporationOwnersResponseDto._readMessage(
      GetCorporationOwnersResponseDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetCorporationOwnersResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetCorporationOwnersResponseDto>,
  ): GetCorporationOwnersResponseDto {
    return {
      corporationOwners: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetCorporationOwnersResponseDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.corporationOwners?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.corporationOwners as any,
        CorporationOwnerDto._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetCorporationOwnersResponseDto,
    reader: protoscript.BinaryReader,
  ): GetCorporationOwnersResponseDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = CorporationOwnerDto.initialize();
          reader.readMessage(m, CorporationOwnerDto._readMessage);
          msg.corporationOwners.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const DeleteCorporationOwnerResponseDto = {
  /**
   * Serializes DeleteCorporationOwnerResponseDto to protobuf.
   */
  encode: function (
    msg: PartialDeep<DeleteCorporationOwnerResponseDto>,
  ): Uint8Array {
    return DeleteCorporationOwnerResponseDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes DeleteCorporationOwnerResponseDto from protobuf.
   */
  decode: function (bytes: ByteSource): DeleteCorporationOwnerResponseDto {
    return DeleteCorporationOwnerResponseDto._readMessage(
      DeleteCorporationOwnerResponseDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes DeleteCorporationOwnerResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteCorporationOwnerResponseDto>,
  ): DeleteCorporationOwnerResponseDto {
    return {
      success: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteCorporationOwnerResponseDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.success) {
      writer.writeBool(1, msg.success);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteCorporationOwnerResponseDto,
    reader: protoscript.BinaryReader,
  ): DeleteCorporationOwnerResponseDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.success = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateCorporationOwnerDto = {
  /**
   * Serializes CreateCorporationOwnerDto to protobuf.
   */
  encode: function (msg: PartialDeep<CreateCorporationOwnerDto>): Uint8Array {
    return CreateCorporationOwnerDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateCorporationOwnerDto from protobuf.
   */
  decode: function (bytes: ByteSource): CreateCorporationOwnerDto {
    return CreateCorporationOwnerDto._readMessage(
      CreateCorporationOwnerDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CreateCorporationOwnerDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateCorporationOwnerDto>,
  ): CreateCorporationOwnerDto {
    return {
      userId: "",
      corporationId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateCorporationOwnerDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.userId) {
      writer.writeString(1, msg.userId);
    }
    if (msg.corporationId) {
      writer.writeString(2, msg.corporationId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateCorporationOwnerDto,
    reader: protoscript.BinaryReader,
  ): CreateCorporationOwnerDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.userId = reader.readString();
          break;
        }
        case 2: {
          msg.corporationId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CorporationOwnerDto = {
  /**
   * Serializes CorporationOwnerDto to protobuf.
   */
  encode: function (msg: PartialDeep<CorporationOwnerDto>): Uint8Array {
    return CorporationOwnerDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CorporationOwnerDto from protobuf.
   */
  decode: function (bytes: ByteSource): CorporationOwnerDto {
    return CorporationOwnerDto._readMessage(
      CorporationOwnerDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CorporationOwnerDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CorporationOwnerDto>,
  ): CorporationOwnerDto {
    return {
      id: "",
      userId: "",
      corporationId: "",
      createdAt: "",
      updatedAt: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CorporationOwnerDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.userId) {
      writer.writeString(2, msg.userId);
    }
    if (msg.corporationId) {
      writer.writeString(3, msg.corporationId);
    }
    if (msg.createdAt) {
      writer.writeString(4, msg.createdAt);
    }
    if (msg.updatedAt) {
      writer.writeString(5, msg.updatedAt);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CorporationOwnerDto,
    reader: protoscript.BinaryReader,
  ): CorporationOwnerDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          msg.userId = reader.readString();
          break;
        }
        case 3: {
          msg.corporationId = reader.readString();
          break;
        }
        case 4: {
          msg.createdAt = reader.readString();
          break;
        }
        case 5: {
          msg.updatedAt = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const CorporationIDJSON = {
  /**
   * Serializes CorporationID to JSON.
   */
  encode: function (msg: PartialDeep<CorporationID>): string {
    return JSON.stringify(CorporationIDJSON._writeMessage(msg));
  },

  /**
   * Deserializes CorporationID from JSON.
   */
  decode: function (json: string): CorporationID {
    return CorporationIDJSON._readMessage(
      CorporationIDJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CorporationID with all fields set to their default value.
   */
  initialize: function (msg?: Partial<CorporationID>): CorporationID {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CorporationID>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: CorporationID, json: any): CorporationID {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    return msg;
  },
};

export const GetCorporationOwnersResponseDtoJSON = {
  /**
   * Serializes GetCorporationOwnersResponseDto to JSON.
   */
  encode: function (msg: PartialDeep<GetCorporationOwnersResponseDto>): string {
    return JSON.stringify(
      GetCorporationOwnersResponseDtoJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes GetCorporationOwnersResponseDto from JSON.
   */
  decode: function (json: string): GetCorporationOwnersResponseDto {
    return GetCorporationOwnersResponseDtoJSON._readMessage(
      GetCorporationOwnersResponseDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetCorporationOwnersResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetCorporationOwnersResponseDto>,
  ): GetCorporationOwnersResponseDto {
    return {
      corporationOwners: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetCorporationOwnersResponseDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.corporationOwners?.length) {
      json["corporationOwners"] = msg.corporationOwners.map(
        CorporationOwnerDtoJSON._writeMessage,
      );
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetCorporationOwnersResponseDto,
    json: any,
  ): GetCorporationOwnersResponseDto {
    const _corporationOwners_ = json["corporationOwners"];
    if (_corporationOwners_) {
      for (const item of _corporationOwners_) {
        const m = CorporationOwnerDtoJSON.initialize();
        CorporationOwnerDtoJSON._readMessage(m, item);
        msg.corporationOwners.push(m);
      }
    }
    return msg;
  },
};

export const DeleteCorporationOwnerResponseDtoJSON = {
  /**
   * Serializes DeleteCorporationOwnerResponseDto to JSON.
   */
  encode: function (
    msg: PartialDeep<DeleteCorporationOwnerResponseDto>,
  ): string {
    return JSON.stringify(
      DeleteCorporationOwnerResponseDtoJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes DeleteCorporationOwnerResponseDto from JSON.
   */
  decode: function (json: string): DeleteCorporationOwnerResponseDto {
    return DeleteCorporationOwnerResponseDtoJSON._readMessage(
      DeleteCorporationOwnerResponseDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes DeleteCorporationOwnerResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteCorporationOwnerResponseDto>,
  ): DeleteCorporationOwnerResponseDto {
    return {
      success: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteCorporationOwnerResponseDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.success) {
      json["success"] = msg.success;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteCorporationOwnerResponseDto,
    json: any,
  ): DeleteCorporationOwnerResponseDto {
    const _success_ = json["success"];
    if (_success_) {
      msg.success = _success_;
    }
    return msg;
  },
};

export const CreateCorporationOwnerDtoJSON = {
  /**
   * Serializes CreateCorporationOwnerDto to JSON.
   */
  encode: function (msg: PartialDeep<CreateCorporationOwnerDto>): string {
    return JSON.stringify(CreateCorporationOwnerDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateCorporationOwnerDto from JSON.
   */
  decode: function (json: string): CreateCorporationOwnerDto {
    return CreateCorporationOwnerDtoJSON._readMessage(
      CreateCorporationOwnerDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CreateCorporationOwnerDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateCorporationOwnerDto>,
  ): CreateCorporationOwnerDto {
    return {
      userId: "",
      corporationId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateCorporationOwnerDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.userId) {
      json["userId"] = msg.userId;
    }
    if (msg.corporationId) {
      json["corporationId"] = msg.corporationId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateCorporationOwnerDto,
    json: any,
  ): CreateCorporationOwnerDto {
    const _userId_ = json["userId"];
    if (_userId_) {
      msg.userId = _userId_;
    }
    const _corporationId_ = json["corporationId"];
    if (_corporationId_) {
      msg.corporationId = _corporationId_;
    }
    return msg;
  },
};

export const CorporationOwnerDtoJSON = {
  /**
   * Serializes CorporationOwnerDto to JSON.
   */
  encode: function (msg: PartialDeep<CorporationOwnerDto>): string {
    return JSON.stringify(CorporationOwnerDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes CorporationOwnerDto from JSON.
   */
  decode: function (json: string): CorporationOwnerDto {
    return CorporationOwnerDtoJSON._readMessage(
      CorporationOwnerDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CorporationOwnerDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CorporationOwnerDto>,
  ): CorporationOwnerDto {
    return {
      id: "",
      userId: "",
      corporationId: "",
      createdAt: "",
      updatedAt: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CorporationOwnerDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.userId) {
      json["userId"] = msg.userId;
    }
    if (msg.corporationId) {
      json["corporationId"] = msg.corporationId;
    }
    if (msg.createdAt) {
      json["createdAt"] = msg.createdAt;
    }
    if (msg.updatedAt) {
      json["updatedAt"] = msg.updatedAt;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CorporationOwnerDto,
    json: any,
  ): CorporationOwnerDto {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _userId_ = json["userId"];
    if (_userId_) {
      msg.userId = _userId_;
    }
    const _corporationId_ = json["corporationId"];
    if (_corporationId_) {
      msg.corporationId = _corporationId_;
    }
    const _createdAt_ = json["createdAt"];
    if (_createdAt_) {
      msg.createdAt = _createdAt_;
    }
    const _updatedAt_ = json["updatedAt"];
    if (_updatedAt_) {
      msg.updatedAt = _updatedAt_;
    }
    return msg;
  },
};
